cv_err_DCG<- cv_err_kendall <- NULL
sid <- sample(1:kfold, length(sample_idx), replace = TRUE)
for (cv_k in 1:kfold)
{
sample_idx_cvtr<- sample_idx[sid!=cv_k]
race_mat <- as.matrix(rdata[sample_idx_cvtr,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx_cvtr]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
cvec <- cvec_r/n*2
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
##### end of pairwise learning ######
### make the test set #####
## test set의 각 게임당 선택 차종
sample_idx_cvte<- sample_idx[sid==cv_k]
race_mat_test<- as.matrix(rdata[sample_idx_cvte,18:33])
num_vec_test <- rdata$V1[sample_idx_cvte]
######## evaluate performances of standard BT estimator ####
tmp = gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)$tau_result_vec
cv_err_DCG <- rbind(cv_err_DCG, tmp)
cv_err_kendall <- rbind(cv_err_kendall, tmp)
}
return(list(cv_err_DCG = cv_err_DCG, cv_err_kendall = cv_err_kendall))
}
cv_gbtFun(rdata, cvec,  sample_idx, kfold = 5)
readLines(file = 'read-cv-jj.R')
?readLines
readLines(con = file('read-cv-jj.R'))
getwd()
listfiles()
list.files()
readLines(con = file('sim.R'))
a = readLines(con = file('sim.R'))
cat(a, file = 'aa.R', se= ='\n')
cat(a, file = 'aa.R', se= '\n')
list.files()
paste('real_cv_result_',file_idx,'.Rdata')
paste0('real_cv_result_',file_idx,'.Rdata')
save.image(paste0('real_cv_result_',file_idx,'.Rdata'))
tmp
cv_k = 1
cv_err_DCG<- cv_err_kendall <- NULL
sid <- sample(1:kfold, length(sample_idx), replace = TRUE)
sample_idx_cvtr<- sample_idx[sid!=cv_k]
race_mat <- as.matrix(rdata[sample_idx_cvtr,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx_cvtr]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
cvec <- cvec_r/n*2
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
sample_idx_cvte<- sample_idx[sid==cv_k]
race_mat_test<- as.matrix(rdata[sample_idx_cvte,18:33])
num_vec_test <- rdata$V1[sample_idx_cvte]
tmp = gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)$tau_result_vec
tmp
cvec
cvfit
cv_fit
tmp[1,]
tmp[2,]
cv_gbtFun <- function(rdata, cvec,  sample_idx, kfold = 5)
{
cv_k = 1
cv_err_DCG<- cv_err_kendall <- NULL
sid <- sample(1:kfold, length(sample_idx), replace = TRUE)
for (cv_k in 1:kfold)
{
sample_idx_cvtr<- sample_idx[sid!=cv_k]
race_mat <- as.matrix(rdata[sample_idx_cvtr,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx_cvtr]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
cvec <- cvec_r/n*2
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
##### end of pairwise learning ######
### make the test set #####
## test set의 각 게임당 선택 차종
sample_idx_cvte<- sample_idx[sid==cv_k]
race_mat_test<- as.matrix(rdata[sample_idx_cvte,18:33])
num_vec_test <- rdata$V1[sample_idx_cvte]
######## evaluate performances of standard BT estimator ####
tmp = gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)$tau_result_vec
cv_err_kendall <- rbind(cv_err_kendall, tmp[1,])
cv_err_DCG <- rbind(cv_err_DCG, tmp[2,])
}
return(list(cv_err_DCG = cv_err_DCG, cv_err_kendall = cv_err_kendall))
}
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 200
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 200
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
seed_v = 1
cv_list = vector(mode = 'list', length = inner_iter)
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
cv_fit <- cv_gbtFun(rdata, cvec,  sample_idx, kfold = 5)
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 200
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
seed_v = 1
cv_list = vector(mode = 'list', length = inner_iter)
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
cv_fit <- cv_gbtFun(rdata, cvec,  sample_idx, kfold = 5)
cv_fit
cv_fit$cv_err_DCG, na.rm = T)
cv_fit$cv_err_DCG
colMeans(cv_fit$cv_err_DCG, na.rm = T)
which.min(colMeans(cv_fit$cv_err_DCG, na.rm = T))
which.min(colMeans(cv_fit$cv_err_kendall, na.rm = T))
cv_list = vector(mode = 'list', length = inner_iter)
gbt_fit
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 500
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
seed_v = 1
result_list = list()
result_list$naive = vector(mode = 'list', length = inner_iter)
result_list$gbt = vector(mode = 'list', length = inner_iter)
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
######## naive BT fit
naive_est <- naive_btFunc(x,y, Qpmat, Gmat_hat)
result_list$naive[[seed_v]] <-  naive_est
cvec <- cvec_r/n*2 ## cvec : threshold c vector
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
load("real_0419_1.Rdata")
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
naive_est <- result_list$naive[[seed_v]]
race_mat_test<- as.matrix(rdata[-sample_idx,18:33])
num_vec_test <- rdata$V1[-sample_idx]
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE, method = 'DCG')
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE)
naive_fit
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est)
naive_fit
naive_fit$tau_result_vec
naive_fit$tau_result_vec
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est)
naive_fit
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 500
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
seed_v = 1
result_list = list()
result_list$naive = vector(mode = 'list', length = inner_iter)
result_list$gbt = vector(mode = 'list', length = inner_iter)
rm(list = ls())
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
load("real_0419_1.Rdata")
source('./lib/real_lib.R')
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
naive_est <- result_list$naive[[seed_v]]
race_mat_test<- as.matrix(rdata[-sample_idx,18:33])
num_vec_test <- rdata$V1[-sample_idx]
######## evaluate performances of standard BT estimator ####
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est)
naive_fit
naive_fit$tau_result_vec
gbt_fit <- result_list$gbt[[seed_v]]
gbt_fit
tmpvec = rep(NA, 4)
cvec
cvec_r
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 1
tau_result_matrix <- matrix(0, inner_iter, length(cvec_r)+1)
seed_v = 1
result_list = list()
result_list$naive = vector(mode = 'list', length = inner_iter)
result_list$gbt = vector(mode = 'list', length = inner_iter)
for ( seed_v in 1:inner_iter)
{
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
######## naive BT fit
naive_est <- naive_btFunc(x,y, Qpmat, Gmat_hat)
result_list$naive[[seed_v]] <-  naive_est
cvec <- cvec_r/n*2 ## cvec : threshold c vector
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
### make the test set #####
race_mat_test<- as.matrix(rdata[-sample_idx,18:33])
num_vec_test <- rdata$V1[-sample_idx]
######## evaluate performances of standard BT estimator ####
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE)
tau_result_matrix[seed_v, 1] <- naive_fit$tau_result_vec
######## evaluate performances of the two estimator ####
gbt_fit <- gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)
result_list$gbt[[seed_v]] <- gbt_fit
tau_result_matrix[seed_v, 2:(length(cvec)+1)]<- gbt_fit$tau_result_vec
report_v <- colMeans(tau_result_matrix[1:seed_v,,drop = F], na.rm = T )
cat('now::::\n')
cat(round(report_v,5),'\n')
}
report_v
gbt_fit
tau_result_matrix
sc_list[[1]]
race_mat_test
num_vec_test
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE)
naive_fit
naive_fit
gbt_fit
gbt_fit <- gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)
gbt_fit
gbt_fit
naive_fit
result_matrix_kendall = matrix(0,inner_iter, length(cvec_r)+1)
result_matrix_DCG = matrix(0,inner_iter, length(cvec_r)+1)
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 200
seed_v = 1
result_matrix_kendall = matrix(0,inner_iter, length(cvec_r)+1)
result_matrix_DCG = matrix(0,inner_iter, length(cvec_r)+1)
result_list = list()
result_list$naive = vector(mode = 'list', length = inner_iter)
result_list$gbt = vector(mode = 'list', length = inner_iter)
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
######## naive BT fit
naive_est <- naive_btFunc(x,y, Qpmat, Gmat_hat)
result_list$naive[[seed_v]] <-  naive_est
cvec <- cvec_r/n*2 ## cvec : threshold c vector
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
### make the test set #####
race_mat_test<- as.matrix(rdata[-sample_idx,18:33])
num_vec_test <- rdata$V1[-sample_idx]
gbt_fit
gbt_fit <- gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)
gbt_fit
gbt_fit$tau_result_vec[1,]
gbt_fit$tau_result_vec[2,]
length(cvec)+1
2:(length(cvec)+1)
result_matrix_kendall[seed_v, 2:(length(cvec)+1)]<- gbt_fit$tau_result_vec[1,]
result_matrix_DCG[seed_v, 2:(length(cvec)+1)]<- gbt_fit$tau_result_vec[2,]
result_matrix_DCG
naive_fit$tau_result[1]
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE)
result_matrix_kenall[seed_v, 1] <- naive_fit$tau_result[1]
result_matrix_DCG[seed_v, 1] <- naive_fit$tau_result[2]
result_matrix_kendall[seed_v, 1] <- naive_fit$tau_result[1]
result_matrix_kendall[seed_v,
]
result_matrix_DCG[seed_v, 1]
result_matrix_DCG[seed_v,
]
list.files()
save.image("real_0421.rdata")
list.files()
rm(list = ls())
gc()
#setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
setwd("C:/Users/uos_stat/Documents/GitHub/RankConsistency")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 4
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 500
seed_v = 1
result_matrix_kendall = matrix(0,inner_iter, length(cvec_r)+1)
result_matrix_DCG = matrix(0,inner_iter, length(cvec_r)+1)
result_list = list()
result_list$naive = vector(mode = 'list', length = inner_iter)
result_list$gbt = vector(mode = 'list', length = inner_iter)
for ( seed_v in 1:inner_iter)
{
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
## 논문에 나온대로 7:3으로 뽑음.
sample_idx <- sort( sample(1:nrow(rdata), trunc(nrow(rdata)*0.8)))
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
######## naive BT fit
naive_est <- naive_btFunc(x,y, Qpmat, Gmat_hat)
result_list$naive[[seed_v]] <-  naive_est
cvec <- cvec_r/n*2 ## cvec : threshold c vector
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
### make the test set #####
race_mat_test<- as.matrix(rdata[-sample_idx,18:33])
num_vec_test <- rdata$V1[-sample_idx]
######## evaluate performances of standard BT estimator ####
naive_fit <- naive_eval(race_mat_test,num_vec_test,
naive_est, return_list = FALSE)
result_matrix_kendall[seed_v, 1] <- naive_fit$tau_result[1]
result_matrix_DCG[seed_v, 1] <- naive_fit$tau_result[2]
######## evaluate performances of the two estimator ####
gbt_fit <- gbt_eval(sc_list, race_mat_test, num_vec_test, cvec,
return_list = FALSE)
result_list$gbt[[seed_v]] <- gbt_fit
result_matrix_kendall[seed_v, 2:(length(cvec)+1)]<- gbt_fit$tau_result_vec[1,]
result_matrix_DCG[seed_v, 2:(length(cvec)+1)]<- gbt_fit$tau_result_vec[2,]
report_v <- colMeans(result_matrix_DCG[1:seed_v,,drop = F], na.rm = T )
cat('now::::\n')
cat(round(report_v,5),'\n')
}
save.image("real_0421.rdata")
list.files()
ls()
result_matrix_DCG
boxplot(result_matrix_DCG)
boxplot(result_matrix_kendall)
boxplot(result_matrix_DCG)
boxplot(result_matrix_DCG)
boxplot(result_matrix_kendall[1:250,])
boxplot(result_matrix_DCG)
boxplot(result_matrix_DCG[,1:2])
