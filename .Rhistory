ls()
install.packages("FNN")
# Generate Train Data
set.seed(1)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
ab = 1
eval_n <- 100
# Generate Train Data
set.seed(1)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
ab = 1
k = 1
ii = 1
# Generate Train Data
set.seed(ii)
eval_n = 100
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
# Generate Test Data
x_test <- sort(rnorm(eval_n))
# Generate Test Data
x_test <- sort(rnorm(eval_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_n)
k = 10
k = 10
# k = 10
eval_point <- x_test
idx_mat <- knnx_index(x_train, eval_point, k)
idx_mat
library(FNN)
idx_mat <- knnx.index(x_train, eval_point, k)
idx_mat
for (i in 1:eval_n)
{
yhat[i] <- mean(y_train[idx.mat[i,]])
}
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_n)
{
yhat[i] <- mean(y_train[idx.mat[i,]])
}
for (i in 1:eval_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
yhat
mean((yhat - y_test)^2)
yhat
eval_point
eval_point <- x_test
eval_point
yhat
y_test
mean((yhat - y_test)^2)
library(FNN)
ii = 1
eval_n <- 100
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
# Generate Test Data
x_test <- sort(rnorm(eval_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn.sig[k] <- mean((yhat - y_test)^2)
}
library(FNN)
ii = 1
eval_n <- 100
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
# Generate Test Data
x_test <- sort(rnorm(eval_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig)
eval_test_n = 10000
library(FNN)
ii = 1
eval_n <- 100
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
eval_test_n = 10000
# Generate Test Data
x_test <- sort(rnorm(eval_test_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_test_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_test_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig)
library(FNN)
ii = 1
eval_n <- 100
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
eval_test_n = 100
# Generate Test Data
x_test <- sort(rnorm(eval_test_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_test_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_test_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig)
library(FNN)
ii = 1
eval_n <- 1000
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- rep(0, 50)
eval_test_n = 1000
# Generate Test Data
x_test <- sort(rnorm(eval_test_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_test_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_test_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig)
plot(knn_sig, type = 'b', color = 'lightblue')
knn_sig <- seq(1,100,by = 5)
knn_sig <- seq(1,100,by = 5)
library(FNN)
ii = 1
eval_n <- 1000
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
knn_sig <- seq(1,100,by = 5)
eval_test_n = 1000
# Generate Test Data
x_test <- sort(rnorm(eval_test_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_test_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_test_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig, type = 'b', color = 'lightblue')
plot(knn_sig, type = 'b', col = 'lightblue')
knn_sig
seq(1,100, by = 5)
kvec <- seq(1,100, by = 5)
library(FNN)
ii = 1
eval_n <- 500
# Generate Train Data
set.seed(ii)
x_train <- sort(rnorm(eval_n))
y_train <- 3 + x_train ^ 2 + rnorm(eval_n)
yhat <- rep(0, eval_n)
kvec <- seq(1,100, by = 5)
error <- rep(0, length(kvec))
eval_test_n = 1000
# Generate Test Data
x_test <- sort(rnorm(eval_test_n))
y_test <- 3 + x_test ^ 2 + rnorm(eval_test_n)
for (k in 1:length(knn_sig))
{
eval_point <- x_test
idx_mat <- knnx.index(x_train, eval_point, k)
for (i in 1:eval_test_n)
{
yhat[i] <- mean(y_train[idx_mat[i,]])
}
knn_sig[k] <- mean((yhat - y_test)^2)
}
plot(knn_sig, type = 'b', col = 'lightblue')
plot(knn_sig, type = 'b', col = 'darkblue')
#setwd("E:\\rank consistency\\simulation\\code\\")
#setwd("C:/Users/uos_stat/Dropbox/A rank-consistency/prog/temp")
setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency/lib")
require('glmnet')
library(igraph)
#setwd("E:\\rank consistency\\simulation\\code\\")
#setwd("C:/Users/uos_stat/Dropbox/A rank-consistency/prog/temp")
setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
require('glmnet')
library(igraph)
library(ggplot2)
install.packages("ggplot2")
##########################################################################################
max.k = 10
p = 10
kn <- 10  ## d
rn <- 1   ## n_s
df = 1    ## t분포 자유도
counter = 1
tn = 50000 ## n (전체 rank pair의 수.)
sim.iter = 200    ## 전체 simulation 과정 반복 수
source('./lib/exe-2.R')
library(ggplot2)
source('./lib/exe-2.R')
#setwd("E:\\rank consistency\\simulation\\code\\")
#setwd("C:/Users/uos_stat/Dropbox/A rank-consistency/prog/temp")
setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
require('glmnet')
library(igraph)
library(ggplot2)
source('./lib/sim.R')
source('./lib/exe-2.R')
## description
## investigate the variance of the proposed estimator
rm(list = ls()); gc()
#setwd("E:\\rank consistency\\simulation\\code\\")
#setwd("C:/Users/uos_stat/Dropbox/A rank-consistency/prog/temp")
setwd("C:/Users/Jeon/Documents/GitHub/RankConsistency")
require('glmnet')
library(igraph)
library(ggplot2)
source('./lib/sim.R')
##########################################################################################
max.k = 10
p = 10
kn <- 10  ## d
rn <- 1   ## n_s
df = 1    ## t분포 자유도
counter = 1
tn = 50000 ## n (전체 rank pair의 수.)
sim.iter = 200    ## 전체 simulation 과정 반복 수
source('./lib/exe-2.R')
tn_vec = c(500,5000,50000)
cor.naive_list = list()
cor.r_list = list()
