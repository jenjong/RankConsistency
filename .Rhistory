abline( v = 1, col = 'black')
index.mat<- c(knnx.index(x, 1 , k = 10))
par( mfrow = c(1,2))
plot(x, y, pch = 20)
abline( v = 1, col = 'black')
index.mat<- c(knnx.index(x, 1 , k = 10))
set.seed(1)
x <- sort(rnorm(100))
y<- 3+x^2 + rnorm(100)
plot(x, y, pch = 20)
unlink('C:/Users/Jeon/Dropbox/class/2018 EDA/week_5/Rgraphics-2_cache', recursive = TRUE)
x = seq(-3,3, 100)
exp(0) - exp(0)*x +0.5*exp(0)x^2
exp(0) - exp(0)*x +0.5*exp(0)*x^2
x = seq(-3,3, 100)
exp(0) - exp(0)*x +0.5*exp(0)*x^2
x = seq(-3,3, length = 100)
exp(0) - exp(0)*x +0.5*exp(0)*x^2
y = exp(0) - exp(0)*x +0.5*exp(0)*x^2
y2 = exp(-x)
plot(x,y2, type='l')
lines(x,y2)
lines(x,y)
plot(x,y2, type='l')
lines(x,y)
plot(x,y2, type='l', col = 'red')
lines(x,y)
y2 = log( 1 + exp(-x))
plot(x,y2, type='l', col = 'red')
y2 = log( 1 + exp(-x))/log(2)
y2
y2 = log( 1 + exp(-x))/log(2)
plot(x,y2, type='l', col = 'red')
abline(v = 0)
abline(v = 0); abline(h=1,lty = 3)
y = 1 - 1/log(2)/2*x + 1/4/log(2)*x^2
plot(x,y2, type='l', col = 'red')
abline(v = 0); abline(h=1,lty = 3)
lines(x,y)
0.3
160*11
4*0.3
4*0.3*11
160*11
180*11
qlogis(0.852)
880/12
880/11
1/9 + 1/3
1/9 + 1/5
1/9 + 1/6
1/9 + 1/8
1/10 + 1/12
1/10 + 1/15
1/10 + 1/16
1/(1/10 + 1/16)
1/(1/10 + 1/12)
1/(1/10 + 1/12)
1/(1/10 + 1/10)
1/(1/9 + 1/9)
rm(list = ls()); gc(reset = T)
# ------------------------
if(!require(rvest)){install.packages('rvest') ; library(rvest)}
url_tvcast = 'http://tvcast.naver.com/jtbc.youth'
html_tvcast = read_html(x = url_tvcast, encoding = 'UTF-8')
# ------------------------
html_tvcast %>% html_nodes(".title a") %>% head(n=3)
# -----------------------
html_tvcast %>% html_nodes(".title a") %>% html_text()%>%head(n=3)
# -----------------------
url_tvcast = 'http://tv.naver.com/mbc.kingloves'
html_tvcast = read_html(x = url_tvcast, encoding = 'UTF-8')
html_tvcast %>% html_nodes(".title a") %>% html_text() %>%
data.frame() %>% head(n = 3)
# -----------------------
url_wiki <- "https://en.wikipedia.org/wiki/Student%27s_t-distribution"
html_wiki <- read_html(x=url_wiki, encoding = 'UFT-8')
# -----------------------
html_wiki %>% html_nodes('.wikitable') %>% html_table() %>%
data.frame() %>% head(n=3)
# -----------------------
url <- "http://www.baseball-reference.com/leagues/MLB/2017.shtml"
webpage <- read_html(url)
# -----------------------
if(!require(rvest)){install.packages("rvest"); library(rvest)}
webpage %>% html_nodes('div#div_teams_standard_batting table') %>%
html_table() %>% data.frame() %>% head(n = 3)
# -----------------------
url = "http://www.weather.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.06.13%3A00&x=19&y=3"
webpage <- read_html(url, encoding = "EUC-KR")
Sys.setlocale("LC_ALL", "English")
webpage %>% html_nodes("table.table_develop3")
tmp <- webpage %>% html_nodes("table.table_develop3") %>%
html_table(header = FALSE, fill=TRUE)%>%
data.frame()
head(tmp)
# -----------------------
url = "http://www.weather.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.06.13%3A00&x=19&y=3"
webpage <- read_html(url, encoding = "EUC-KR")
Sys.setlocale("LC_ALL", "EUC-KR")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
Sys.setlocale("LC_ALL", "UTF-8")
?Sys.setlocale
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
start_point
start_point[1]
start_point + 3
typeof(start_point)
?optimize
require(graphics)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
for ( i in 1:100)
for (j in 1:100)
for (k in 1:100)
f = 1
fit = lm(y~x)
list.files()
apply()
apply
install.packages("Deriv")
f <- function(x, y) sin(x) * cos(y)
library(Deriv)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
library(evd)
pgev
dgev
Deriv(f, "y")
f <- function(x, y) sin(x) * cos(y) + x^2
f <- function(x, y) sin(x) * cos(y) + z^2
Deriv(f, "y")
Deriv(f, c("y","z")
)
?nlm
nlm
?deriv
matrix(1:100,20,5,byrow = T)
x_cov = cov(x)
x = matrix(1:100,20,5,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(0:99,20,5,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(1:4,2,2,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(c(1,2,1,4),2,2,byrow = T)
x_cov = cov(x)
x_cov
x_cov = matrix(c(1,0.5,0.5,1),2,2)
eigen(x_cov)
seq(1,2,length=20)
svd(x_cov)
CO2
write.csv(CO2, 'CO2.csv', row.names = F )
getwd()
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
vmat
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
}
vmat
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
}
vmat
boxplot(vmat[,1:3])
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3])
vmat
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_1(Qmat_fit, gbt_est)
v3 = evalFun_1(Qmat_fit, sr1_est)
c(v1,v2,v3)
Qmat_fit
sr1_est
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
library('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# v1 = evalFun_1(rdata, bt_est, sel_idx)
# v2 = evalFun_1(rdata, gbt_est, sel_idx)
# v3 = evalFun_1(rdata, sr1_est, sel_idx)
# vmat = rbind(vmat, c(v1,v2,v3))
#
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
vmat = rbind(vmat, c(v1,v2,v3))
}
vmat
boxplot(vmat[,1:3])
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
library('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
# v1 = evalFun_1(rdata, bt_est, sel_idx)
# v2 = evalFun_1(rdata, gbt_est, sel_idx)
# v3 = evalFun_1(rdata, sr1_est, sel_idx)
# vmat = rbind(vmat, c(v1,v2,v3))
#
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
vmat = rbind(vmat, c(v1,v2,v3))
}
i
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
i
result = sr1.result
result = sr1.result
method='count'
allowties = F
sr1_fun
