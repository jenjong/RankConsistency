vmat3
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', 1,"_", 43))
bt_est.list_1_43 = bt_est.list
gbt_est.list_1_43 = gbt_est.list
gbt_est.list2_1_43 = gbt_est.list2
sr1_est.list_1_43 = sr1_est.list
sr_est.list_1_43 = sr_est.list
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
sel_idx.top = which(BT_est_rank >= 1 & BT_est_rank <= 13)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
#sim.num = 100
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', i_1,"_", i_2))
# test procedure
vmat1 = vmat2 = vmat3 = NULL
i = 1
for (i in 1:sim.num)
{
cat(i,'\n')
set.seed(i)
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx.top)
gbt_est = gbt_est.list[[i]]
if (is.null(gbt_est)) next
gbt_est = gbt_est.list_1_43[[i]][sel_idx.top]
#bt_est = bt_est.list[[i]]
bt_est = bt_est.list_1_43[[i]][sel_idx.top]
#sr_est = sr_est.list[[i]]
sr_est = sr_est.list_1_43[[i]][sel_idx.top]
#sr1_est = sr1_est.list[[i]]
sr1_est = sr1_est.list_1_43[[i]][sel_idx.top]
#gbt2_est = gbt_est.list2[[i]]
gbt2_est = gbt_est.list2_1_43[[i]][sel_idx.top]
# v1 = evalFun_1(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_1(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_1(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_1(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_1(rdata[-s_idx,], sr_est, sel_idx)
# vmat1 = rbind(vmat1, c(v1,v2,v5,v3,v4))
#
# v1 = evalFun_2(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_2(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_2(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_2(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_2(rdata[-s_idx,], sr_est, sel_idx)
# vmat2 = rbind(vmat2, c(v1,v2,v5,v3,v4))
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v5 = evalFun_3(Qmat_fit, gbt2_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
v4 = evalFun_3(Qmat_fit, sr_est)
vmat3 = rbind(vmat3, c(v1,v2,v5,v3,v4))
}
# boxplot(vmat1[,-c(3)])
# boxplot(vmat2[,-c(3)])
boxplot(vmat3[,-c(3)])
colMeans(vmat3)
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', 1,"_", 43))
bt_est.list_1_43 = bt_est.list
gbt_est.list_1_43 = gbt_est.list
gbt_est.list2_1_43 = gbt_est.list2
sr1_est.list_1_43 = sr1_est.list
sr_est.list_1_43 = sr_est.list
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
sel_idx.top = which(BT_est_rank >= 1 & BT_est_rank <= 13)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 100
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', i_1,"_", i_2))
# test procedure
vmat1 = vmat2 = vmat3 = NULL
i = 1
for (i in 1:sim.num)
{
cat(i,'\n')
set.seed(i)
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx.top)
gbt_est = gbt_est.list[[i]]
if (is.null(gbt_est)) next
gbt_est = gbt_est.list_1_43[[i]][sel_idx.top]
#bt_est = bt_est.list[[i]]
bt_est = bt_est.list_1_43[[i]][sel_idx.top]
#sr_est = sr_est.list[[i]]
sr_est = sr_est.list_1_43[[i]][sel_idx.top]
#sr1_est = sr1_est.list[[i]]
sr1_est = sr1_est.list_1_43[[i]][sel_idx.top]
#gbt2_est = gbt_est.list2[[i]]
gbt2_est = gbt_est.list2_1_43[[i]][sel_idx.top]
# v1 = evalFun_1(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_1(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_1(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_1(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_1(rdata[-s_idx,], sr_est, sel_idx)
# vmat1 = rbind(vmat1, c(v1,v2,v5,v3,v4))
#
# v1 = evalFun_2(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_2(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_2(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_2(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_2(rdata[-s_idx,], sr_est, sel_idx)
# vmat2 = rbind(vmat2, c(v1,v2,v5,v3,v4))
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v5 = evalFun_3(Qmat_fit, gbt2_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
v4 = evalFun_3(Qmat_fit, sr_est)
vmat3 = rbind(vmat3, c(v1,v2,v5,v3,v4))
}
# boxplot(vmat1[,-c(3)])
# boxplot(vmat2[,-c(3)])
boxplot(vmat3[,-c(3)])
colMeans(vmat3)
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', 1,"_", 43))
bt_est.list_1_43 = bt_est.list
gbt_est.list_1_43 = gbt_est.list
gbt_est.list2_1_43 = gbt_est.list2
sr1_est.list_1_43 = sr1_est.list
sr_est.list_1_43 = sr_est.list
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
sel_idx.top = which(BT_est_rank >= 1 & BT_est_rank <= 13)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', i_1,"_", i_2))
# test procedure
vmat1 = vmat2 = vmat3 = NULL
i = 1
for (i in 1:sim.num)
{
cat(i,'\n')
set.seed(i)
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx.top)
gbt_est = gbt_est.list[[i]]
if (is.null(gbt_est)) next
gbt_est = gbt_est.list_1_43[[i]][sel_idx.top]
#bt_est = bt_est.list[[i]]
bt_est = bt_est.list_1_43[[i]][sel_idx.top]
#sr_est = sr_est.list[[i]]
sr_est = sr_est.list_1_43[[i]][sel_idx.top]
#sr1_est = sr1_est.list[[i]]
sr1_est = sr1_est.list_1_43[[i]][sel_idx.top]
#gbt2_est = gbt_est.list2[[i]]
gbt2_est = gbt_est.list2_1_43[[i]][sel_idx.top]
# v1 = evalFun_1(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_1(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_1(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_1(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_1(rdata[-s_idx,], sr_est, sel_idx)
# vmat1 = rbind(vmat1, c(v1,v2,v5,v3,v4))
#
# v1 = evalFun_2(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_2(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_2(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_2(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_2(rdata[-s_idx,], sr_est, sel_idx)
# vmat2 = rbind(vmat2, c(v1,v2,v5,v3,v4))
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v5 = evalFun_3(Qmat_fit, gbt2_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
v4 = evalFun_3(Qmat_fit, sr_est)
vmat3 = rbind(vmat3, c(v1,v2,v5,v3,v4))
}
# boxplot(vmat1[,-c(3)])
# boxplot(vmat2[,-c(3)])
boxplot(vmat3[,-c(3)])
colMeans(vmat3)
colMeans(vmat3)
i_1 = 1; i_2 = 13
load(file = paste0(restorePath, '/result/real_test_', i_1,"_", i_2))
boxplot(vmat3[,-3], col='lightblue',
names = c('BT', 'gBT', 'gSR','SR'),
ylab = 'accuracy')
colMeans(vmat3)
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', 1,"_", 43))
bt_est.list_1_43 = bt_est.list
gbt_est.list_1_43 = gbt_est.list
gbt_est.list2_1_43 = gbt_est.list2
sr1_est.list_1_43 = sr1_est.list
sr_est.list_1_43 = sr_est.list
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
sel_idx.top = which(BT_est_rank >= 1 & BT_est_rank <= 13)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
load(paste0(restorePath,
'/result/real_traninig_', i_1,"_", i_2))
# test procedure
vmat1 = vmat2 = vmat3 = NULL
i = 1
for (i in 1:sim.num)
{
cat(i,'\n')
set.seed(i)
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx.top)
gbt_est = gbt_est.list[[i]]
if (is.null(gbt_est)) next
gbt_est = gbt_est.list_1_43[[i]][sel_idx.top]
#bt_est = bt_est.list[[i]]
bt_est = bt_est.list_1_43[[i]][sel_idx.top]
#sr_est = sr_est.list[[i]]
sr_est = sr_est.list_1_43[[i]][sel_idx.top]
#sr1_est = sr1_est.list[[i]]
sr1_est = sr1_est.list_1_43[[i]][sel_idx.top]
#gbt2_est = gbt_est.list2[[i]]
gbt2_est = gbt_est.list2_1_43[[i]][sel_idx.top]
# v1 = evalFun_1(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_1(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_1(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_1(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_1(rdata[-s_idx,], sr_est, sel_idx)
# vmat1 = rbind(vmat1, c(v1,v2,v5,v3,v4))
#
# v1 = evalFun_2(rdata[-s_idx,], bt_est, sel_idx)
# v2 = evalFun_2(rdata[-s_idx,], gbt_est, sel_idx)
# v5 = evalFun_2(rdata[-s_idx,], gbt2_est, sel_idx)
# v3 = evalFun_2(rdata[-s_idx,], sr1_est, sel_idx)
# v4 = evalFun_2(rdata[-s_idx,], sr_est, sel_idx)
# vmat2 = rbind(vmat2, c(v1,v2,v5,v3,v4))
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v5 = evalFun_3(Qmat_fit, gbt2_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
v4 = evalFun_3(Qmat_fit, sr_est)
vmat3 = rbind(vmat3, c(v1,v2,v5,v3,v4))
}
# boxplot(vmat1[,-c(3)])
# boxplot(vmat2[,-c(3)])
boxplot(vmat3[,-c(3)])
colMeans(vmat3)
if (Sys.info()[1] == "Linux")
{
restorePath = '/home/jeon/Dropbox/GitHub/RankConsistency'
} else {
restorePath = 'C:/Users/Jeon/Dropbox/GitHub/RankConsistency'
}
save.image(file = paste0(restorePath,
'/result/real_test_full'))
colMeans(vmat3[,1:3])
colMeans(vmat3)
#
load(file = paste0(restorePath, '/result/real_test_full'))
boxplot(vmat3[,-3], col='lightblue',
names = c('BT', 'gBT', 'gSR','SR'),
ylab = 'accuracy')
colMeans(vmat3)
i_1 = 1; i_2 = 43
load(file = paste0(restorePath, '/result/real_test_', i_1,"_", i_2))
boxplot(vmat3, col='lightblue',
names = c('BT', 'gBT', 'gSR','SR'),
ylab = 'accuracy')
#
load(file = paste0(restorePath, '/result/real_test_full'))
boxplot(vmat3[,-3], col='lightblue',
names = c('BT', 'gBT', 'gSR','SR'),
ylab = 'accuracy')
colMeans(vmat3)
sr_est
sr1_est
gbt2_est
bt_est
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 13
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
bt_est.list = gbt_est.list = sr1_est.list =
sr_est.list = gbt_est.list2 =
vector(mode='list', length = sim.num)
bt_result.list = gbt_result.list = sr1_result.list =
sr_result.list = gbt_result.list2 =
vector(mode='list', length = sim.num)
# training code
race_mat <- as.matrix(rdata[,18:33])
num_vec <- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
evalFun_3(Qmat_fit, sr_est)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40),
off_set = T)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est_off = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
gbt_fit_result
gbt_est_off = gbtFun_recov(gbt_fit, Qmat_fit,
method = 'count', allowties = F)
gbt_fit
gbt_est_off = gbtFun_recov(gbt_fit$sc_list, Qmat_fit,
method = 'count', allowties = F)
gbt_est_off
gbt_est_off
gbt_est_off = rank(gbt_est_off[sel_idx])
evalFun_3(Qmat_fit, gbt_est_off)
evalFun_3(Qmat_fit, gbt_est_off)
gbt_est_off
Qmat_fit
Qmat_fit$Gmat_hat
sel_idx
Qmat_fit$Gmat_hat[sel_idx,sel_idx]
sel_idx
setdiff(sel_idx,40)
Qmat_fit$Gmat_hat[setdiff(sel_idx,40),setdiff(sel_idx,40)]
Qmat_fit$Gmat_hat[setdiff(sel_idx,40),-setdiff(sel_idx,40)]
Qmat_fit$Gmat_hat[setdiff(sel_idx,40),-setdiff(sel_idx,40)]
image(Qmat_fit$Gmat_hat[setdiff(sel_idx,40),-setdiff(sel_idx,40)])
Qmat_fit$Gmat_hat[setdiff(sel_idx,40),-setdiff(sel_idx,40)]
Qmat_fit$Gmat_hat[sel_idx,-sel_idx]
Qmat_fit$Gmat_hat[sel_idx,-sel_idx]
gbt_est_off
Qmat_fit$Gmat_hat[sel_idx,-sel_idx][order(gbt_est_off)]
Qmat_fit$Gmat_hat[sel_idx,-sel_idx][order(gbt_est_off),]
a = Qmat_fit$Gmat_hat[sel_idx,-sel_idx][order(gbt_est_off),]
image(a)
a
image(a)
gbt_est
a
