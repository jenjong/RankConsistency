sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
# drop obs by cut_var option in QmatFun
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial', allowties = F)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
# drop obs by cut_var option in QmatFun
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial', allowties = F)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
# drop obs by cut_var option in QmatFun
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial', allowties = F)
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
evalFun_3(Qmat_fit, gbt_est)
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
evalFun_3(Qmat_fit, gbt_est)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
# drop obs by cut_var option in QmatFun
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial', allowties = F)
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=43)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
# drop obs by cut_var option in QmatFun
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
gbt_est
unique(gbt_est)
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
num_vec <- rdata$V1[s_idx]
i=1
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count', allowties = F)
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
result = sr1_fun(Qmat_fit)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
is.null(gbt_est)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v1
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v2
v3 = evalFun_1(rdata, sr1_est, sel_idx)
v3
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
}
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial',
allowties = F)
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
}
i
vmat
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
boxplot(vmat[,1:3])
i
set.seed(i)
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial',
allowties = F)
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
gbt_est
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
gbt_est
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
(is.null(gbt_fit$gbt_est))
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=13)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
if (is.null(gbt_fit$gbt_est)) next
gbt_fit.result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit.result, Qmat_fit,
method = 'count', allowties = F)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='binomial',
allowties = F)
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3])
evalFun_3(rdata, bt_est, sel_idx)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='count', allowties = F)
evalFun_3(Qmat_fit, sr1_est)
