Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 14
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
#rdata = rbind(rdata,rdata)
n = nrow(rdata)
bt_est.list = gbt_est.list = sr1_est.list =
sr_est.list = gbt_est.list2 =
vector(mode='list', length = sim.num)
bt_result.list = gbt_result.list = sr1_result.list =
sr_result.list = gbt_result.list2 =
vector(mode='list', length = sim.num)
# training code
race_mat <- as.matrix(rdata[,18:33])
num_vec <- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
evalFun_3(Qmat_fit, bt_est)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 14
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
#rdata = rbind(rdata,rdata)
n = nrow(rdata)
bt_est.list = gbt_est.list = sr1_est.list =
sr_est.list = gbt_est.list2 =
vector(mode='list', length = sim.num)
bt_result.list = gbt_result.list = sr1_result.list =
sr_result.list = gbt_result.list2 =
vector(mode='list', length = sim.num)
# training code
race_mat <- as.matrix(rdata[,18:33])
num_vec <- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
sel_idx
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 14
i_2 = 43
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
bt_est.list = gbt_est.list = sr1_est.list =
sr_est.list = gbt_est.list2 =
vector(mode='list', length = sim.num)
bt_result.list = gbt_result.list = sr1_result.list =
sr_result.list = gbt_result.list2 =
vector(mode='list', length = sim.num)
# training code
race_mat <- as.matrix(rdata[,18:33])
num_vec <- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
evalFun_3_pair(bt_result, Qmat_fit)
evalFun_3_pair(gbt_fit_result, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, sr1_est)
race_mat
cut_var = 0
p = 43
sel_idx
n_mat <- matrix(0, p, p)  ## n_mat_jk
w_mat <- matrix(0, p, p)  ## w_mat_jk
i=1
for (i in 1:nrow(race_mat))  ## nrow
{
n_v <- num_vec[i] ## n_v
p_vec<- race_mat[i,1:n_v]
for (j in 1:(n_v-1))
{
for (k in (j+1):n_v)
{
if (p_vec[j] == p_vec[k]) next  ## ties
w_mat[ p_vec[j], p_vec[k] ] <- w_mat[ p_vec[j], p_vec[k] ] + 1
n_mat[ p_vec[j], p_vec[k] ] <- n_mat[ p_vec[j], p_vec[k] ] + 1
n_mat[ p_vec[k], p_vec[j] ] <- n_mat[ p_vec[j], p_vec[k] ]
}
}
}
sc_alarm <- FALSE
Qmat
Qmat = n_mat
Qmat
w_mat
w_mat[sel_idx]
i_1 = 1
i_2 = 13
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
sel_idx
w_mat[sel_idx,-sel_idx]
sel_idx
sel_idx
Qmat = n_mat
Qmat[sel_idx,-sel_idx] = 0
Qmat[-sel_idx,sel_idx] = 0
Qmat = n_mat
Qmat[sel_idx,-sel_idx] = 0
Qmat[-sel_idx,sel_idx] = 0
Qmat
Qmat = n_mat
Qmat[sel_idx, sel_idx] = 0
Qmat
Qmat
Qmat
Gmat_hat <- w_mat/Qmat
Gmat_hat
Gmat_hat[!is.finite(Gmat_hat)] = 0
Gmat_hat
Qpmat = Qmat
for (j in 1:nrow(Qmat)) Qpmat[j,] = Qmat[j,]/n*2
p
p = ncol(Qmat)
x = matrix(0, p*(p-1), p)
y = rep(0, p*(p-1) )
ix = 1
for (i in 1:p)
{
for (j in 1:p)
{
if (i == j) next
jx1 = min(i,j)
jx2 = max(i,j)
x[ix,jx1] = 1; x[ix,jx2] = -1
if (i<j) y[ix] = 1
ix = ix + 1
}
}
x = x[,-p]
colnames(Gmat_hat) = colnames(Qpmat) =
colnames(Qmat) = colnames(w_mat) = names(sel_idx)
Qmat
p = ncol(Qmat)
p
p = ncol(Qmat)
x = matrix(0, p*(p-1), p)
y = rep(0, p*(p-1) )
ix = 1
for (i in 1:p)
{
for (j in 1:p)
{
if (i == j) next
jx1 = min(i,j)
jx2 = max(i,j)
x[ix,jx1] = 1; x[ix,jx2] = -1
if (i<j) y[ix] = 1
ix = ix + 1
}
}
x = x[,-p]
colnames(Gmat_hat) = colnames(Qpmat) =
colnames(Qmat) = colnames(w_mat) = names(sel_idx)
colnames(Gmat_hat)
names(sel_idx)
sel_idx
p
colnames(Gmat_hat) = colnames(Qpmat) =
colnames(Qmat) = colnames(w_mat) =
paste0("car",1:p)
colnames(Gmat_hat)
w_mat
QmatFun <- function(race_mat, num_vec, cut_var = 0,
p = 43, sel_idx = 1:43, off_set = FALSE)
{
n_mat <- matrix(0, p, p)  ## n_mat_jk
w_mat <- matrix(0, p, p)  ## w_mat_jk
i=1
for (i in 1:nrow(race_mat))  ## nrow
{
n_v <- num_vec[i] ## n_v
p_vec<- race_mat[i,1:n_v]
for (j in 1:(n_v-1))
{
for (k in (j+1):n_v)
{
if (p_vec[j] == p_vec[k]) next  ## ties
w_mat[ p_vec[j], p_vec[k] ] <- w_mat[ p_vec[j], p_vec[k] ] + 1
n_mat[ p_vec[j], p_vec[k] ] <- n_mat[ p_vec[j], p_vec[k] ] + 1
n_mat[ p_vec[k], p_vec[j] ] <- n_mat[ p_vec[j], p_vec[k] ]
}
}
}
sc_alarm <- FALSE
if ( min(rowSums(n_mat) ) == 0 )
{
sc_alarm <- TRUE
}
if(off_set)
{
Qmat = n_mat
Qmat[sel_idx, sel_idx] = 0
} else  {
Qmat <- n_mat[sel_idx, sel_idx]
w_mat <- w_mat[sel_idx, sel_idx]
}
if (cut_var>0)
{
w_mat[Qmat<=cut_var] = 0
Qmat[Qmat<=cut_var] = 0
}
n = sum(Qmat)
Gmat_hat <- w_mat/Qmat
Gmat_hat[!is.finite(Gmat_hat)] = 0
Qpmat = Qmat
for (j in 1:nrow(Qmat)) Qpmat[j,] = Qmat[j,]/n*2
p = ncol(Qmat)
x = matrix(0, p*(p-1), p)
y = rep(0, p*(p-1) )
ix = 1
for (i in 1:p)
{
for (j in 1:p)
{
if (i == j) next
jx1 = min(i,j)
jx2 = max(i,j)
x[ix,jx1] = 1; x[ix,jx2] = -1
if (i<j) y[ix] = 1
ix = ix + 1
}
}
x = x[,-p]
if(off_set)
{
colnames(Gmat_hat) = colnames(Qpmat) =
colnames(Qmat) = colnames(w_mat) =
paste0("car",1:p)
} else {
colnames(Gmat_hat) = colnames(Qpmat) =
colnames(Qmat) = colnames(w_mat) = names(sel_idx)
}
return( list(x=x, y=y, Qpmat=Qpmat, Gmat_hat=Gmat_hat,
n = n, sc_alarm = sc_alarm, Qmat = Qmat,
Wmat = w_mat) )
}
sel_idx
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx, off_set = TRUE)
Qmat_fit
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
cut_var
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 0,
p=43, sel_idx, off_set = TRUE)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx, off_set = TRUE)
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx, off_set = F)
Qmat_fit
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = 1:43, off_set = F)
Qmat_fit
Qmat_fit$Qmat
Qmat = Qmat_fit$Qmat
sel_idx
Qmat[sel_idx,-sel_idx]
apply(Qmat[sel_idx,-sel_idx],1,sum)
sel_idx
sel_idx
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setidff(sel_idx,40), off_set = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40), off_set = F)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40), off_set = F)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40),
off_set = T)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
gbt_est
gbt_est[sel_idx]
gbt_est[setdiff(sel_idx,40)]
aaa = gbt_est[setdiff(sel_idx)]
aaa = gbt_est[sel_idx]
aaa
gbt_est
aaa = rank(gbt_est[sel_idx])
aaa
rm(list = ls())
gc()
# training code
# set path
if (Sys.info()[1] == "Linux") {
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
}
# load car segmentation
load("Real_BT_gBT2_cv5_all_data.rdata")
i_1 = 1
i_2 = 13
sel_idx = which(BT_est_rank >= i_1 & BT_est_rank <= i_2)
# library
library(MASS)
library(igraph)
library(glmnet)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
sim.num = 50
rdata<-read.csv('racing_data.csv', header=F)
n = nrow(rdata)
bt_est.list = gbt_est.list = sr1_est.list =
sr_est.list = gbt_est.list2 =
vector(mode='list', length = sim.num)
bt_result.list = gbt_result.list = sr1_result.list =
sr_result.list = gbt_result.list2 =
vector(mode='list', length = sim.num)
# training code
race_mat <- as.matrix(rdata[,18:33])
num_vec <- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
gbt_est
## off_set
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40),
off_set = T)
Qmat = Qmat_fit$Qmat
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
# 1:13
bt_est <- rank(btFun(Qmat_fit))
bt_result <- make_result(bt_est)
sr_est <- srFun(Qmat_fit)
sr_result  <- make_result(sr_est)
sr1.result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(sr1.result, Qmat_fit, method='count',
allowties = F)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_fit_result = gbt_fit$sc_list
gbt_est = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
gbt_est
gbt_est_off
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx = setdiff(sel_idx,40),
off_set = T)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est_off = gbtFun_recov(gbt_fit_result, Qmat_fit,
method = 'count', allowties = F)
gbt_est_off = rank(gbt_est_off[sel_idx])
gbt_est_off
sel_idx
Qmat_fit
gbt_fit_result
evalFun_3_pair(gbt_fit_result, Qmat_fit, sel_idx)
Qmat_fit <-QmatFun(race_mat, num_vec, cut_var = 1,
p=43, sel_idx)
evalFun_3(Qmat_fit, gbt_est)
evalFun_3(Qmat_fit, gbt_est_off)
