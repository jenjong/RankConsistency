lines(x,y)
plot(x,y2, type='l', col = 'red')
lines(x,y)
y2 = log( 1 + exp(-x))
plot(x,y2, type='l', col = 'red')
y2 = log( 1 + exp(-x))/log(2)
y2
y2 = log( 1 + exp(-x))/log(2)
plot(x,y2, type='l', col = 'red')
abline(v = 0)
abline(v = 0); abline(h=1,lty = 3)
y = 1 - 1/log(2)/2*x + 1/4/log(2)*x^2
plot(x,y2, type='l', col = 'red')
abline(v = 0); abline(h=1,lty = 3)
lines(x,y)
0.3
160*11
4*0.3
4*0.3*11
160*11
180*11
qlogis(0.852)
880/12
880/11
1/9 + 1/3
1/9 + 1/5
1/9 + 1/6
1/9 + 1/8
1/10 + 1/12
1/10 + 1/15
1/10 + 1/16
1/(1/10 + 1/16)
1/(1/10 + 1/12)
1/(1/10 + 1/12)
1/(1/10 + 1/10)
1/(1/9 + 1/9)
rm(list = ls()); gc(reset = T)
# ------------------------
if(!require(rvest)){install.packages('rvest') ; library(rvest)}
url_tvcast = 'http://tvcast.naver.com/jtbc.youth'
html_tvcast = read_html(x = url_tvcast, encoding = 'UTF-8')
# ------------------------
html_tvcast %>% html_nodes(".title a") %>% head(n=3)
# -----------------------
html_tvcast %>% html_nodes(".title a") %>% html_text()%>%head(n=3)
# -----------------------
url_tvcast = 'http://tv.naver.com/mbc.kingloves'
html_tvcast = read_html(x = url_tvcast, encoding = 'UTF-8')
html_tvcast %>% html_nodes(".title a") %>% html_text() %>%
data.frame() %>% head(n = 3)
# -----------------------
url_wiki <- "https://en.wikipedia.org/wiki/Student%27s_t-distribution"
html_wiki <- read_html(x=url_wiki, encoding = 'UFT-8')
# -----------------------
html_wiki %>% html_nodes('.wikitable') %>% html_table() %>%
data.frame() %>% head(n=3)
# -----------------------
url <- "http://www.baseball-reference.com/leagues/MLB/2017.shtml"
webpage <- read_html(url)
# -----------------------
if(!require(rvest)){install.packages("rvest"); library(rvest)}
webpage %>% html_nodes('div#div_teams_standard_batting table') %>%
html_table() %>% data.frame() %>% head(n = 3)
# -----------------------
url = "http://www.weather.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.06.13%3A00&x=19&y=3"
webpage <- read_html(url, encoding = "EUC-KR")
Sys.setlocale("LC_ALL", "English")
webpage %>% html_nodes("table.table_develop3")
tmp <- webpage %>% html_nodes("table.table_develop3") %>%
html_table(header = FALSE, fill=TRUE)%>%
data.frame()
head(tmp)
# -----------------------
url = "http://www.weather.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.06.13%3A00&x=19&y=3"
webpage <- read_html(url, encoding = "EUC-KR")
Sys.setlocale("LC_ALL", "EUC-KR")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
Sys.setlocale("LC_ALL", "UTF-8")
?Sys.setlocale
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
start_point
start_point[1]
start_point + 3
typeof(start_point)
?optimize
require(graphics)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
for ( i in 1:100)
for (j in 1:100)
for (k in 1:100)
f = 1
fit = lm(y~x)
list.files()
apply()
apply
install.packages("Deriv")
f <- function(x, y) sin(x) * cos(y)
library(Deriv)
f <- function(x, y) sin(x) * cos(y)
Deriv(f)
library(evd)
pgev
dgev
Deriv(f, "y")
f <- function(x, y) sin(x) * cos(y) + x^2
f <- function(x, y) sin(x) * cos(y) + z^2
Deriv(f, "y")
Deriv(f, c("y","z")
)
?nlm
nlm
?deriv
matrix(1:100,20,5,byrow = T)
x_cov = cov(x)
x = matrix(1:100,20,5,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(0:99,20,5,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(1:4,2,2,byrow = T)
x_cov = cov(x)
x_cov
x = matrix(c(1,2,1,4),2,2,byrow = T)
x_cov = cov(x)
x_cov
x_cov = matrix(c(1,0.5,0.5,1),2,2)
eigen(x_cov)
seq(1,2,length=20)
svd(x_cov)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
Gmat_hat[Qmat == 0] = NA
GG = matrix(NA, ncol(Qmat), ncol(Qmat))
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
p = ncol(Qmat)
Gmat_hat[Qmat == 0] = NA
GG = matrix(NA, p, p)
for ( i in 1:p)
{
for (j in 1:p)
{
if (is.na(Gmat_hat[i,j])) next
if ( est[i]- est[j] > 0)
{
GG[i,j] = Gmat_hat[i,j]
}
if ( est[i]- est[j] < 0)
{
GG[i,j] =  Gmat_hat[j,i]
}
if ( est[i]== est[j])
{
GG[i,j] =  0.5
}
}
}
est = gbt_est
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
p = ncol(Qmat)
Gmat_hat[Qmat == 0] = NA
GG = matrix(NA, p, p)
for ( i in 1:p)
{
for (j in 1:p)
{
if (is.na(Gmat_hat[i,j])) next
if ( est[i]- est[j] > 0)
{
GG[i,j] = Gmat_hat[i,j]
}
if ( est[i]- est[j] < 0)
{
GG[i,j] =  Gmat_hat[j,i]
}
if ( est[i]== est[j])
{
GG[i,j] =  0.5
}
}
}
v1 = GG
v1
v2 = as.integer(!is.na(Gmat_hat))
v2
matrix(as.integer(!is.na(Gmat_hat)),p,p)
Gmat_hat
names(v1) = names(v2)  = colnames(Gmat_hat)
v2
v1 = GG
v2 = matrix(as.integer(!is.na(Gmat_hat)),p,p)
colnames(v1) = colnames(v2)  = rownames(v1) = rownames(v2) = colnames(Gmat_hat)
v1
v2
evalFun_5_pair = function(result, Qmat_fit)
{
tmp1 = result
tmp2<-cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp = rbind(tmp1, tmp2)
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
p = ncol(Qmat)
Gmat_hat[Qmat == 0] = NA
GG = matrix(NA, p, p)
k = 1
for ( k in 1:nrow(tmp))
{
i = tmp[k,1]
j = tmp[k,2]
if (is.na(Gmat_hat[i,j])) next
if (tmp[k,3] == 1  )   GG[i,j] =  Gmat_hat[i,j]
if (tmp[k,3] == 0  )   GG[i,j] =  Gmat_hat[j,i]
}
v1 = GG
v2 = matrix(as.integer(!is.na(Gmat_hat)),p,p)
colnames(v1) = colnames(v2)  = rownames(v1) = rownames(v2) = colnames(Gmat_hat)
list(v1 = v1, v2 = v2)
}
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
evalFun_5(Qmat_fit, gbt_est)
apply(evalFun_5(Qmat_fit, gbt_est)$v1,1,sum, na.rm)
apply(evalFun_5(Qmat_fit, gbt_est)$v1,1,sum, na.rm = T)
a1 = evalFun_4(Qmat_fit, gbt_est)
a1
evalFun_5(Qmat_fit, gbt_est)$v1
evalFun_5(Qmat_fit, gbt_est)$v1
evalFun_5(Qmat_fit, sr1_est)$v1
#
evalFun_5_pair(result1, gbt_est)
#
evalFun_5_pair(result1, Qmat_fit)
#
apply(evalFun_5_pair(result1, Qmat_fit),1,sum, na.rm = T)
#
apply(evalFun_5_pair(result1, Qmat_fit)$v1,1,sum, na.rm = T)
evalFun_4_pair(result1, Qmat_fit)
evalFun_5_pair(result2, Qmat_fit)$v1
#
evalFun_5(Qmat_fit, gbt_est)$v1
#
gbt_bt = evalFun_5(Qmat_fit, gbt_est)$v1
sr_bt = evalFun_5(Qmat_fit, sr1_est)$v1
gbt_bt
sr_bt
#
gbt = evalFun_5_pair(result1, Qmat_fit)$v1
sr = evalFun_5_pair(result2, Qmat_fit)$v1
gbt
sr
evalFun_5_pair(result2, Qmat_fit)$v2
Qmat = = evalFun_5_pair(result2, Qmat_fit)$v2
Qmat = evalFun_5_pair(result2, Qmat_fit)$v2
getwd()
?save
save.image(list = c("gbt_bt", "sr_bt", "gbt", "sr", "Qmat"),"real_sim.rdata")
save.image(list = list("gbt_bt", "sr_bt", "gbt", "sr", "Qmat"),"real_sim.rdata")
save(list = list("gbt_bt", "sr_bt", "gbt", "sr", "Qmat"),"real_sim.rdata")
save(list = list("gbt_bt", "sr_bt", "gbt", "sr", "Qmat"),file = "real_sim.rdata")
save(list = c("gbt_bt", "sr_bt", "gbt", "sr", "Qmat"),file = "real_sim.rdata")
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
#
gbt_bt = evalFun_5(Qmat_fit, gbt_est)$v1
sr_bt = evalFun_5(Qmat_fit, sr1_est)$v1
#
gbt = evalFun_5_pair(result1, Qmat_fit)$v1
sr = evalFun_5_pair(result2, Qmat_fit)$v1
Qmat = evalFun_5_pair(result2, Qmat_fit)$v2
gbt
Nmat = Qmat_fit$Qmat
Nmat
save(list = c("gbt_bt", "sr_bt", "gbt", "sr", "Qmat", "Nmat"),file = "real_sim.rdata")
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
#
gbt_bt = evalFun_5(Qmat_fit, gbt_est)$v1
sr_bt = evalFun_5(Qmat_fit, sr1_est)$v1
#
gbt = evalFun_5_pair(result1, Qmat_fit)$v1
sr = evalFun_5_pair(result2, Qmat_fit)$v1
Qmat = evalFun_5_pair(result2, Qmat_fit)$v2
Nmat = Qmat_fit$Qmat
save(list = c("gbt_bt", "sr_bt", "gbt", "sr", "Qmat", "Nmat"),file = "real_sim.rdata")
gbt_bt
