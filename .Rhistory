source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'boost')
gbt_est <- gbt_fit$gbt_est
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='gaussian')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
cbind(a1$v1, a2$v1, a1$v2)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)
colSums(a3)/98
gbt_est
gbt_est
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
gbt_est <- gbt_fit$gbt_est
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='gaussian')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'gaussian')
evalFun_3(Qmat_fit, gbt_est)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'gaussian')
evalFun_3(Qmat_fit, gbt_est)
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial')
evalFun_3(Qmat_fit, gbt_est)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
gbt_est <- gbt_fit$gbt_est
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'binomial')
evalFun_3(Qmat_fit, gbt_est)
gbtFun_recov
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
evalFun_3(Qmat_fit, gbt_est)
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
evalFun_3(Qmat_fit, gbt_est)
result$gbt_fit
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
gbt_est
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
colSums(a3)/98
a3[,1:2]/a3[,3]
colMeans(a3[,1:2]/a3[,3])
Qmat_fit$Qmat
rowSums(Qmat_fit$Qmat)
rowSums(Qmat_fit$Qmat==1)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
gbt_fit$sc_list
result
Gmat_hat = Qmat_fit$Gmat_hat
result
cbind(result[,2], result[,1])
cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp1 = result
tmp2<-cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp = cbind(tmp1, tmp2)
tmp
tmp = rbind(tmp1, tmp2)
tmp
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
Gmat_hat[Qmat == 0] = NA
GG = rep(0,length(est))
GG = rep(0,ncol(Qmat))
tmp1 = result
tmp2<-cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp = rbind(tmp1, tmp2)
tmp
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
Gmat_hat[Qmat == 0] = NA
GG = rep(0,ncol(Qmat))
GG
k = 1
tmp[k,3]
tmp[k,3]
tmp[k,1:2]
i = tmp[k,1]
j = tmp[k,2]
tmp1 = result
tmp2<-cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp = rbind(tmp1, tmp2)
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
Gmat_hat[Qmat == 0] = NA
GG = rep(0,ncol(Qmat))
k = 1
for ( k in 1:nrow(tmp))
{
i = tmp[k,1]
j = tmp[k,2]
if (is.na(Gmat_hat[i,j])) next
if (tmp[k,3] == 1  )   GG[i] = GG[i] + Gmat_hat[i,j]
if (tmp[k,3] == 0  )   GG[i] = GG[i] + Gmat_hat[i,j]
}
GG
v1 = GG
v2 = apply(!is.na(Gmat_hat), 1, sum, na.rm = T)
v2
names(v1) = names(v2)  = colnames(Gmat_hat)
v1
evalFun_4_pair = function(result, Qmat_fit)
{
tmp1 = result
tmp2<-cbind(result[,2], result[,1], 1 - result[,3], result[,4])
tmp = rbind(tmp1, tmp2)
Gmat_hat = Qmat_fit$Gmat_hat
Qmat = Qmat_fit$Qmat
Gmat_hat[Qmat == 0] = NA
GG = rep(0,ncol(Qmat))
k = 1
for ( k in 1:nrow(tmp))
{
i = tmp[k,1]
j = tmp[k,2]
if (is.na(Gmat_hat[i,j])) next
if (tmp[k,3] == 1  )   GG[i] = GG[i] + Gmat_hat[i,j]
if (tmp[k,3] == 0  )   GG[i] = GG[i] + Gmat_hat[i,j]
}
v1 = GG
v2 = apply(!is.na(Gmat_hat), 1, sum, na.rm = T)
names(v1) = names(v2)  = colnames(Gmat_hat)
list(v1 = v1, v2 = v2)
}
evalFun_4_pair(sr1_fun(Qmat_fit), Qmat_fit)
a1 = evalFun_4_pair(gbt_fit$sc_list, Qmat_fit)
a1
a2 = evalFun_4_pair(sr1_fun(Qmat_fit), Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
a1 = evalFun_4_pair(gbt_fit$sc_list, Qmat_fit)
a2 = evalFun_4_pair(sr1_fun(Qmat_fit), Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
a1 = evalFun_4_pair(gbt_fit$sc_list, Qmat_fit)
a2 = evalFun_4_pair(sr1_fun(Qmat_fit), Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a2
evalFun_4_pair(sr1_fun(Qmat_fit), Qmat_fit)
sr1_fun(Qmat_fit)
gbt_fit$sc_list
result = gbt_fit$sc_list
a1 = evalFun_4_pair(result, Qmat_fit)
result = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result, Qmat_fit)
a2
a1
evalFun_4_pair(result, Qmat_fit)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result = gbt_fit$sc_list
a1 = evalFun_4_pair(result, Qmat_fit)
result = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
gbt_fit$sc_list
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
result1
cbind(result1[,3], reulst2[,3])
cbind(result1[,3], result2[,3])
sum(result1[,3]!= result2[,3])
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
gBT2_est_rank
BT_est_rank
#which(BT_est_rank==9)
#gBT2_est_rank[40]
#which(BT_est_rank==4)
#gBT2_est_rank[12]
sel_idx = which(BT_est_rank <=13)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==34]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
race_mat <- as.matrix(rdata[,18:33])
num_vec<- rdata$V1
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
# estimation
bt_est <- btFun(Qmat_fit)
u = sort(unique(c(Qmat_fit$Qpmat)))
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, ctype = 'balance')
result = gbt_fit$sc_list
gbt_est = gbtFun_recov(result, Qmat_fit, method = 'count')
# evaluation
evalFun_1(rdata, bt_est, sel_idx)
evalFun_1(rdata, gbt_est, sel_idx)
evalFun_2(rdata, bt_est, sel_idx)
evalFun_2(rdata, gbt_est, sel_idx)
evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
evalFun_3_pair(sr1_fun(Qmat_fit), Qmat_fit)
evalFun_3_pair(sr2_fun(Qmat_fit), Qmat_fit)
evalFun_3(Qmat_fit, bt_est)
evalFun_3(Qmat_fit, gbt_est)
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
evalFun_3(Qmat_fit, sr1_est)
a1 = evalFun_4(Qmat_fit, gbt_est)
a2 = evalFun_4(Qmat_fit, sr1_est)
a3 = cbind(a1$v1, a2$v1, a1$v2)
colSums(a3)/98
colMeans(a3[,1:2]/a3[,3])
result1 = gbt_fit$sc_list
a1 = evalFun_4_pair(result1, Qmat_fit)
result2 = sr1_fun(Qmat_fit)
a2 = evalFun_4_pair(result2, Qmat_fit)
a3 = cbind(a1$v1, a2$v1, a1$v2)
a3
colSums(a3)/98
