source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'none')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
#v1 = evalFun_1(rdata, bt_est, sel_idx)
#v2 = evalFun_1(rdata, gbt_est, sel_idx)
#v3 = evalFun_1(rdata, sr1_est, sel_idx)
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v2 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
#v1 = evalFun_1(rdata, bt_est, sel_idx)
#v2 = evalFun_1(rdata, gbt_est, sel_idx)
#v3 = evalFun_1(rdata, sr1_est, sel_idx)
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3])
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'none')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
#v1 = evalFun_1(rdata, bt_est, sel_idx)
#v2 = evalFun_1(rdata, gbt_est, sel_idx)
#v3 = evalFun_1(rdata, sr1_est, sel_idx)
v1 = evalFun_3(Qmat_fit, bt_est)
v2 = evalFun_3(Qmat_fit, gbt_est)
v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
boxplot(vmat[,1:3])
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'none')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
boxplot(vmat[,1:3], ylim = c(0.02, 0.12))
boxplot(vmat[,1:3], ylim = c(0, 0.12))
boxplot(vmat[,1:3])
rank(bt_est)
rank(gbt_est)
s_idx = sample(1:n, trunc(n*1))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
6- rank(bt_est)
6- rank(gbt_est)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'none')
gbt_est <- gbt_fit$gbt_est
6- rank(bt_est)
6- rank(gbt_est)
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'boost')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3])
colMeans(vmat)
vmat
boxplot(vmat[-10,1:3])
colMeans(vmat[-10,])
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
balance
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.8))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
boxplot(vmat[,1:3])
boxplot(vmat[,1:3], ylim = c(0.08, 0.12))
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
bt_est
Qmat_fit
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
Qmat_fit
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
bt_est
rm(list = ls())
setwd('C:/Users/Jeon/Documents/GitHub/RankConsistency')
load("Real_BT_gBT2_cv5_all_data.rdata")
sel_idx = which(BT_est_rank <=5)
#sel_idx = which(gBT2_est_rank <=5)
#sel_idx = sel_idx[!sel_idx==8]
#sel_idx = sel_idx[!sel_idx==12]
#sel_idx = sel_idx[!sel_idx==20]
#sel_idx = sel_idx[!sel_idx==38]
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
# data preprocessing
#set.seed(1)
vmat = NULL
i=1
for (i in 1:50)
{
set.seed(i)
n = nrow(rdata[,18:33])
s_idx = sample(1:n, trunc(n*0.7))
race_mat <- as.matrix(rdata[s_idx,18:33])
num_vec <- rdata$V1[s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
bt_est <- btFun(Qmat_fit)
gbt_fit <- gbtFun(Qmat_fit, cut_v = 0, 'balance')
gbt_est <- gbt_fit$gbt_est
result = sr1_fun(Qmat_fit)
sr1_est = gbtFun_recov(result, Qmat_fit, method='binomial')
if (is.null(gbt_est)) next
race_mat <- as.matrix(rdata[-s_idx,18:33])
num_vec <- rdata$V1[-s_idx]
Qmat_fit <-QmatFun(race_mat, num_vec, p=43, sel_idx)
v1 = evalFun_1(rdata, bt_est, sel_idx)
v2 = evalFun_1(rdata, gbt_est, sel_idx)
v3 = evalFun_1(rdata, sr1_est, sel_idx)
#v1 = evalFun_3(Qmat_fit, bt_est)
#v2 = evalFun_3(Qmat_fit, gbt_est)
#v3 = evalFun_3(Qmat_fit, sr1_est)
#v3 = evalFun_3_pair(gbt_fit$sc_list, Qmat_fit)
vmat = rbind(vmat, c(v1,v2,v3))
}
