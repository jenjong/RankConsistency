lirbary(R2OpenBUGS)
library(R2OpenBUGS)
model.file <- system.file(package="R2OpenBUGS", "model", "schools.txt")
file.show(model.file)
data(schools)
schools
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list ("J", "y", "sigma.y")
inits <- function(){
list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
sigma.theta=runif(1, 0, 100))
}
parameters <- c("theta", "mu.theta", "sigma.theta")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000)
print(schools.sim)
plot(schools.sim)
install.packages("KoNLP")
install.packages("devtools")
install.packages("rJAVA")
install.packages("rJava")
install.packages("rJava")
getwd()
load("RS.Rdata")
load("./doc/RS.Rdata")
va
va1
table( va1 ) / 50
table( va2 ) / 50
table( va3 ) / 50
table( va4 ) / 50
table( va5 ) / 50
RRMSE_LA1
matplot(t(RRMSE_LA1))
matplot(t(RRMSE_LA1), type='l')
matplot(t(RRMSE_LA1), type='b')
matplot(t(RRMSE_LA2), type='b')
matplot(t(RRMSE_LA3), type='b')
matplot(t(RRMSE_LA4), type='b')
matplot(t(RRMSE_LA5), type='b')
version
update.packages()
install.packages("RSelenium")
library(RSelenium)
install.packages("RSelenium")
library(RSelenium)
library(Rselenium)
install.packages("RSelenium")
install.packages('devtools')
library(devtools)
install.packages("rJava")
library(rJava)
install.packages('devtools')
library(devtools)
install.packages("drat", repos="https://cran.rstudio.com")
install.packages("drat", repos = "https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
Sys.getlocale()
sm.splin
sm.spline
install.packages('shiny', repos='http://cran.rstudio.com/')
getwd)_
getwd()
Sys.info
Sys.info()
Sys.info()[1]
#
# 1. load the list of coefficients from real_0421.rdata
# 2. there are bt and gbt estimators in result_list$naive and
#     result_list$gbt
# 3.
# function: dcgFun()
rm(list = ls())
gc()
if (Sys.info()[1] == "Linux")
{
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd("C:/Users/jeon/Documents/GitHub/RankConsistency")
}
load("real_0421-sc.Rdata")
result_list_sc = result_list
load("real_0421.rdata")
Sys.info()[1]
Sys.info()[1] == "Linux"
setwd("/home/jeon/Documents/GitHub/RankConsistency")
getwd()
#
# 1. load the list of coefficients from real_0421.rdata
# 2. there are bt and gbt estimators in result_list$naive and
#     result_list$gbt
# 3.
# function: dcgFun()
rm(list = ls())
gc()
rm(list = ls())
gc()
if (Sys.info()[1] == "Linux")
{
setwd("/home/jeon/Documents/GitHub/RankConsistency")
} else {
setwd("C:/Users/jeon/Documents/GitHub/RankConsistency")
}
rm(list = ls())
gc()
if (Sys.info()[1] == "Linux" ) setwd("/home/jeon/Documents/Github/RankConsistency/result/real_data_0621")
if (Sys.info()[1] == "Windows" ) setwd("C:/Users/jeon/Documents/GitHub/RankConsistency/result/real_data_0621")
library(igraph)
library(MASS)
source('./lib/car_lib.R')
source('./lib/lib_rank.R')
source('./lib/sim.R')
source('./lib/real_lib.R')
require('glmnet')
rdata<-read.csv('racing_data.csv', header=F)
max_k = 1
cvec_r <- seq(0, max_k, by = 2)
file_idx = 1
inner_iter = 1
seed_v = 1
#for ( seed_v in 1:inner_iter)
#{
cat("iteration::", seed_v, '\n')
seed_v_i = (file_idx -1)*inner_iter + seed_v
set.seed(seed_v_i)
sc_list = vector(mode ='list', length = max_k)
sample_idx <- 1:nrow(rdata)
# cross validation : 여기서 sample 다시 생성해야 함!
race_mat <- as.matrix(rdata[sample_idx,18:33])   ## train set의 각 게임당 선택 차종
num_vec<- rdata$V1[sample_idx]  ## 각 게임마다 참여한 유저 수
Qmat_fit <-QmatFunc(race_mat, num_vec)
Qpmat = Qmat_fit$Qpmat
Gmat_hat = Qmat_fit$Gmat_hat
x = Qmat_fit$x
y = Qmat_fit$y
n = Qmat_fit$n
######## naive BT fit
naive_est <- naive_btFunc(x,y, Qpmat, Gmat_hat)
cvec <- cvec_r/n*2 ## cvec : threshold c vector
sc_list <- sc_listFun(cvec, Qpmat, Gmat_hat)
gbt_fit <- gbt_eval(sc_list, race_mat_test = NULL, num_vec_test = NULL, cvec,
return_list = FALSE)
gbt_fit
gbt_est  = gbt_fit$gbt_est_mat[1,]
gbt_est
bt_est <- naive_est
bt_est
i = 1
for (i in 1:length(num_vec_test))
{
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
rank_true <- 1:length(obs_cars)
# BT
rank_hat  <- order( bt_est[obs_cars], decreasing = T)
#perform_kendall[i,1] <- (1-cor(rank_true, rank_hat, method = "kendall"))/2
perform_kendall[i,1] <- kenFun(obs_cars, bt_est, total = TRUE)
# gBT
rank_hat  <- order( gbt_est[obs_cars], decreasing = T)
#perform_kendall[i,2] <- (1-cor(rank_true, rank_hat, method = "kendall"))/2
perform_kendall[i,2] <- kenFun(obs_cars, gbt_est, total = TRUE)
}
race_mat_test
race_mat_test<- as.matrix(rdata[,18:33])
num_vec_test <- rdata$V1
gbt_est  = gbt_fit$gbt_est_mat[1,]
bt_est <- naive_est
perform_kendall = matrix(0,length(num_vec_test),2)
# evaluation
i = 1
for (i in 1:length(num_vec_test))
{
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
rank_true <- 1:length(obs_cars)
# BT
rank_hat  <- order( bt_est[obs_cars], decreasing = T)
#perform_kendall[i,1] <- (1-cor(rank_true, rank_hat, method = "kendall"))/2
perform_kendall[i,1] <- kenFun(obs_cars, bt_est, total = TRUE)
# gBT
rank_hat  <- order( gbt_est[obs_cars], decreasing = T)
#perform_kendall[i,2] <- (1-cor(rank_true, rank_hat, method = "kendall"))/2
perform_kendall[i,2] <- kenFun(obs_cars, gbt_est, total = TRUE)
}
apply(perform_kendall,2,mean, na.rm = TRUE)
perform_kendall
i = 319
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
obs_cars
i = 494
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
i = 494
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
obs_cars
apply(perform_kendall,2, sum, na.rm = TRUE)
dim(race_mat)
i = 493
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
obs_cars
i = 490
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
obs_cars
i = 490
for ( i in 1:100)
{
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
obs_cars
}
i = 490
for ( i in 1:100)
{
obs_cars <- race_mat_test[i,][1:num_vec_test[i]]
cat(obs_cars,'\n')
}
